package benchmarks

import (
	"testing"
)

func Benchmark_useIndex_fixedSize(b *testing.B) {
	ten := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}
	hundred := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}
	thousand := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}

	tenSlice := make([]float64, 10)
	hundredSlice := make([]float64, 100)
	thousandSlice := make([]float64, 1000)

	testCases := []struct {
		name        string
		input       []float64
		destination []float64
	}{
		{
			name:        "Slice with ten items",
			input:       ten,
			destination: tenSlice,
		},
		{
			name:        "Slice with hundred items",
			input:       hundred,
			destination: hundredSlice,
		},
		{
			name:        "Slice with thousand items",
			input:       thousand,
			destination: thousandSlice,
		},
	}

	for _, tc := range testCases {
		b.Run(tc.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				addItems(tc.input, tc.destination)
			}
		})
	}
}

func Benchmark_useAppend_fixedSize(b *testing.B) {
	ten := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}
	hundred := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}
	thousand := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}

	tenSlice := make([]float64, 10)
	hundredSlice := make([]float64, 100)
	thousandSlice := make([]float64, 1000)

	testCases := []struct {
		name        string
		input       []float64
		destination []float64
	}{
		{
			name:        "Slice with ten items",
			input:       ten,
			destination: tenSlice,
		},
		{
			name:        "Slice with hundred items",
			input:       hundred,
			destination: hundredSlice,
		},
		{
			name:        "Slice with thousand items",
			input:       thousand,
			destination: thousandSlice,
		},
	}

	for _, tc := range testCases {
		b.Run(tc.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				appendItems(tc.input, tc.destination)
			}
		})
	}
}

func Benchmark_usedAppend_zeroSize(b *testing.B) {
	ten := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}
	hundred := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}
	thousand := []float64{1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11, 1.2, 1.3, 1.4, 5, 6, 7, 8, 9, 10, 11}

	tenSlice := make([]float64, 0)
	hundredSlice := make([]float64, 0)
	thousandSlice := make([]float64, 0)

	testCases := []struct {
		name  string
		input []float64
		dest  []float64
	}{
		{
			name:  "Slice with ten items",
			input: ten,
			dest:  tenSlice,
		},
		{
			name:  "Slice with hundred items",
			input: hundred,
			dest:  hundredSlice,
		},
		{
			name:  "Slice with thousand items",
			input: thousand,
			dest:  thousandSlice,
		},
	}

	for _, tc := range testCases {
		b.Run(tc.name, func(b *testing.B) {
			for j := 0; j < b.N; j++ {
				appendItems(tc.input, tc.dest)
			}
		})
	}

}

func appendItems(inputSLice, destSlice []float64) {
	for i := 0; i < len(inputSLice); i++ {
		destSlice = append(destSlice, inputSLice[i])
	}
}

func addItems(inputSLice, destSlice []float64) {
	for i := 0; i < len(inputSLice); i++ {
		destSlice[i] = inputSLice[i]
	}
}
